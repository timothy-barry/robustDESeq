// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// run_adaptive_permutation_test
List run_adaptive_permutation_test(List precomp_list, IntegerVector x, int h, double alpha, std::string test_stat_str);
RcppExport SEXP _robustDESeq_run_adaptive_permutation_test(SEXP precomp_listSEXP, SEXP xSEXP, SEXP hSEXP, SEXP alphaSEXP, SEXP test_stat_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type precomp_list(precomp_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type test_stat_str(test_stat_strSEXP);
    rcpp_result_gen = Rcpp::wrap(run_adaptive_permutation_test(precomp_list, x, h, alpha, test_stat_str));
    return rcpp_result_gen;
END_RCPP
}
// generate_wor_sample_test
std::vector<std::vector<int>> generate_wor_sample_test(int n, int n_trt, int n_samples);
RcppExport SEXP _robustDESeq_generate_wor_sample_test(SEXP nSEXP, SEXP n_trtSEXP, SEXP n_samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n_trt(n_trtSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_wor_sample_test(n, n_trt, n_samples));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_robustDESeq_run_adaptive_permutation_test", (DL_FUNC) &_robustDESeq_run_adaptive_permutation_test, 5},
    {"_robustDESeq_generate_wor_sample_test", (DL_FUNC) &_robustDESeq_generate_wor_sample_test, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_robustDESeq(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
